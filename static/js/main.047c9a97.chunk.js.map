{"version":3,"sources":["components/context/index.js","components/card/Card.js","components/input/Input.js","components/Window/Window.js","components/navigation/Nav.js","App.js","serviceWorker.js","index.js"],"names":["context","React","createContext","Provider","Consumer","Card","bannerUrl","channelImg","title","subscriberCount","className","style","backgroundImage","src","alt","Input","input","createRef","onSubmit","e","preventDefault","props","handleSubmit","current","value","ref","this","htmlFor","type","required","Component","Window","state","viewCount","getChannelId","api","url","fetch","then","data","ok","json","Error","items","id","channelId","a","console","log","fetchData","catch","err","item","thumbnails","snippet","banner","brandingSettings","image","statistics","setState","medium","bannerMobileExtraHdImageUrl","shortNumber","message","labelValue","Math","abs","Number","toFixed","bind","Nav","href","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.047c9a97.chunk.js","sourcesContent":["import React from 'react';\n\nconst context = React.createContext();\nexport const Provider = context.Provider;\nexport const Consumer = context.Consumer;","import React from 'react';\nimport { Consumer } from '../context'\nimport './card.scss'\n\nexport default function Card() {\n\n    return (\n        <Consumer>\n            {({ bannerUrl, channelImg, title, subscriberCount }) => {\n                return (\n                    <div className=\"card\">\n                        {/* <div className=\"card-top\"><span ></span></div> */}\n                        <div className=\"card-top\" style={{ backgroundImage: `url(${bannerUrl})` }}></div>\n                        <div className=\"bottom\">\n                            <div className=\"card-circle\"><img src={channelImg} alt=\"Channel Profile\" /></div>\n                            <div className=\"card-bottom\">\n                                <h1>{title || \"no channel Name\"}</h1>\n                                <div className=\"results\">\n                                    <div>{subscriberCount}</div>\n\n                                    {/* <span>Views</span> */}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )\n            }}\n        </Consumer>\n    )\n\n}","import React, { Component } from \"react\";\nimport './input.scss';\n\nclass Input extends Component  {\n    input = React.createRef();\n\n    render(){\n        return (\n            <form \n                className=\"input\" \n                onSubmit={ (e) => { e.preventDefault();\n                        this.props.handleSubmit(this.input.current.value)\n                    }\n                }>\n                <input\n                    ref={this.input}\n                    htmlFor=\"channel-search\"\n                    type=\"text\"\n                    className=\"label-input\"\n                    required\n                />\n                <label htmlFor=\"channel-search\" className=\"label-name\">\n                    <span className=\"content-name\">\n                        Search\n                    </span>\n                </label>\n                <input type=\"submit\" className=\"material-icons\" value=\"search\" />\n            </form>\n        );\n    }\n}\n\nexport default Input","import React, { Component } from \"react\";\nimport { Provider } from '../context'\nimport './Window.scss'\nimport Card from '../card/Card';\nimport Input from '../input/Input'\n\n\nclass Window extends Component {\n\n    state = {\n        bannerUrl: '',\n        channelImg: '',\n        viewCount: '',\n        title:'',\n        subscriberCount: 0\n    }\n\n\n    componentDidMount() {\n        this.getChannelId();\n    }\n\n    /**\n     * Retrieve the channel id using the keyword\n     * @param {string} input Input entered by the user\n     */\n    async getChannelId(input=\"MKBHD\") {\n        const api = \"AIzaSyC760IgRY6xKZo2J0o5gKjBDLws5l9enE0\";\n        let url = `https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&q=${input}&key=${api}`;\n        await fetch(url)\n            .then((data) => data.ok ? data.json() : new Error(`Didn't get the results`))\n            .then((data) => {\n                return data.items[0].id.channelId;\n            })\n            .then(async (data) => {\n                console.log(`channelId: ${data}`);\n                let url = `https://www.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2Cstatistics%2CbrandingSettings&id=${data}&key=${api}`;\n                console.log(\"fetch function \" + typeof this.fetchData)\n\n                await this.fetchData(url)\n            })\n            .catch((err) => console.log(`Get Channelid Error:${err}`));\n    }\n\n    /**\n     * Fetch channel stats using channel ID\n     * @param { String } url Url to fetch data from  \n     */\n    async fetchData(url) {\n        await fetch(url)\n            .then((data) => data.ok ? data.json() : new Error(`Didn't get the channel subs`))\n            .then((data) => {\n                    let item = data.items[0];\n                    const thumbnails = item.snippet.thumbnails;\n                    const banner = item.brandingSettings.image;\n                    const statistics = item.statistics;\n\n                    this.setState({\n                        title: item.snippet.title,\n                        channelImg: thumbnails.medium.url,\n                        bannerUrl: banner.bannerMobileExtraHdImageUrl,\n                        subscriberCount: this.shortNumber(statistics.subscriberCount),\n                        viewCount: this.shortNumber(statistics.viewCount)\n                    })\n            })\n            .catch((err) => {\n                console.log(err.message)\n            });\n    }\n\n    /**\n     * Converts the number in to short form\n     * @param { number } labelValue Number you want to convert\n     */\n    shortNumber(labelValue) {\n        // Nine Zeroes for Billions\n        return Math.abs(Number(labelValue)) >= 1.0e9\n            ? (Math.abs(Number(labelValue)) / 1.0e9).toFixed(1) + \"B\"\n            : // Six Zeroes for Millions\n            Math.abs(Number(labelValue)) >= 1.0e6\n                ? (Math.abs(Number(labelValue)) / 1.0e6).toFixed(1) + \"M\"\n                : // Three Zeroes for Thousands\n                Math.abs(Number(labelValue)) >= 1.0e3\n                    ? (Math.abs(Number(labelValue)) / 1.0e3).toFixed(1) + \"K\"\n                    : Math.abs(Number(labelValue));\n    }\n\n    render() {\n        return (\n            <Provider value={ this.state}>\n                <div className=\"sub-window\">\n                <div className=\"search\">\n                    <Card />\n                    <Input\n                        handleSubmit={this.getChannelId.bind(this)}\n                    />\n                </div>\n            </div>\n            </Provider>\n        );\n    }\n}\n\nexport default Window;","import React from 'react';\nimport './Nav.scss'\n\nconst Nav = () =>{\n    return(\n        <nav>\n            <ul>\n                <li><a href=\"https://github.com/KDSGYT/subsCount-react\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></li>\n                <li><a href=\"https://www.kdsg.live\">Author</a></li>\n            </ul>       \n        </nav>\n    )\n}\n\nexport default Nav","import React from 'react';\nimport Window from './components/Window/Window';\nimport Nav from './components/navigation/Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Window />\n      {/* <Nav /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}